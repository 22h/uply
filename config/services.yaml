# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: false      # Automatically injects dependencies in your services.
        autoconfigure: false # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    App\Command\MonitorCommand:
        arguments:
            - '@App\Monitor\MonitorUnitChain'
            - '@event_dispatcher'
        tags:
            - { name: 'console.command' }
        calls:
            - [setLogger, ['@monolog.logger.monitor']]

    App\Command\LoopCommand:
        tags:
            - { name: 'console.command' }

    App\Command\Loop\LoopCommand:
        arguments:
            - '@App\Service\EventService'
            - '@App\Service\MonitoringLoopService'
        tags:
            - { name: 'console.command' }
        calls:
            - [setLogger, ['@monolog.logger.monitor']]

    App\Command\Loop\SleepCommand:
        arguments:
            - '@App\Service\MonitoringLoopService'
        tags:
            - { name: 'console.command' }

    App\Command\Loop\ContinueCommand:
        arguments:
            - '@App\Service\MonitoringLoopService'
        tags:
            - { name: 'console.command' }

    App\Command\Loop\StatusCommand:
        arguments:
            - '@App\Service\MonitoringLoopService'
        tags:
            - { name: 'console.command' }

    App\Command\Loop\StartCommand:
        arguments:
            - '@App\Service\MonitoringLoopService'
        tags:
            - { name: 'console.command' }
        calls:
            - [setLogger, ['@monolog.logger.monitor']]

    App\Monitor\UnitParameterBagFactory:

    App\Repository\Unit\StatusCodeRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\Unit\StatusCode

    App\Repository\Unit\GooglePageSpeedRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\Unit\GooglePageSpeed

    App\Repository\Unit\CertificateExpireRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\Unit\CertificateExpire

    App\Repository\EventRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\Event

    App\Service\Curl\CurlRequestFactory:

    App\Service\HttpHeader:

    App\Service\EventFactory:

    App\Service\EventService:
        public: true
        arguments:
            - '@App\Repository\EventRepository'
            - '@App\Service\EventFactory'

    App\Service\MonitoringLoopService:
        arguments:
            - '@App\Service\EventFactory'
            - '@App\Service\EventService'

    App\Event\Listener\NotificationListener:
        arguments:
            - '@App\Notification\MailNotification'
            - '@App\Notification\DiscordNotification'
        tags:
            - { name: kernel.event_listener, event: uply.monitor.notify, method: onMonitorNotify }

    App\Event\Listener\NotificationLoggingListener:
        tags:
            - { name: kernel.event_listener, event: uply.monitor.notify, method: onMonitorNotify }
        calls:
            - [setLogger, ['@monolog.logger.uply_unit']]

    App\Event\Listener\MonitorFinishedListener:
        arguments:
            - '@App\Repository\EventRepository'
            - '@App\Service\EventFactory'
        tags:
            - { name: kernel.event_listener, event: uply.monitor.finished, method: onMonitorFinished }

    App\Notification\MailNotification:
        arguments:
            - '@swiftmailer.mailer'
            - '%env(MAIL_FROM)%'
            - '%env(MAIL_TO)%'

    App\Notification\DiscordNotification:
          arguments:
              - '%env(DISCORD_WEBHOOK)%'